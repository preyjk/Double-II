openapi: 3.0.0
info:
  title: GP Appointment Management API
  version: 1.0.0
  description: API to manage appointments with General Practitioners (GPs)

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.gpbooking.icu
    description: AWS server
  - url: https://c8ar5h58d8.execute-api.us-east-1.amazonaws.com/v1

paths:
  /appointment:
    get:
      summary: Get appointment by booking reference
      description: Retrieve an appointment using the booking reference, last name, and date of birth.
      parameters:
        - in: query
          name: reference
          description: The booking reference of the appointment.
          required: true
          schema:
            type: string
        - in: query
          name: lastname
          description: The last name of the person who booked the appointment.
          required: true
          schema:
            type: string
        - in: query
          name: dob
          description: The date of birth of the person who booked the appointment.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '500':
          description: Internal server error

  /appointments:
    get:
      summary: List all appointments
      operationId: listAppointments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: doctorId
          description: ID of the doctor to filter schedules.
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date to filter schedules.
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date to filter schedules.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '500':
          description: Internal server error

    post:
      summary: Create a new appointment
      operationId: createAppointment
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input

  /appointments/{appointmentId}:
    get:
      summary: Get details of an appointment
      operationId: getAppointmentById
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to fetch
          schema:
            type: string
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found

    put:
      summary: Update an existing appointment
      operationId: updateAppointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to update
          schema:
            type: string
      requestBody:
        description: Updated appointment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input
        '404':
          description: Appointment not found

    delete:
      summary: Delete an appointment
      operationId: deleteAppointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to delete
          schema:
            type: string
      responses:
        '204':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  /appointments/{appointmentId}/reschedule:
    post:
      summary: Reschedule an appointment
      description: Reschedule an existing appointment to a new schedule.
      operationId: rescheduleAppointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          description: The ID of the appointment to be rescheduled.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ScheduleId:
                  type: string
                  description: The new schedule ID for the appointment.
              required:
                - ScheduleId
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '500':
          description: Internal server error

  /user/appointments:
    get:
      summary: List all appointments under current user
      operationId: listUserAppointments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: doctorId
          description: ID of the doctor to filter schedules.
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date to filter schedules.
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date to filter schedules.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '500':
          description: Internal server error

    post:
      summary: Create a new appointment for the current user
      operationId: createUserAppointment
      security:
        - bearerAuth: []
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input
  /appointments/reschedule:
    post:
      summary: Reschedule an appointment
      description: Reschedule an existing appointment to a new schedule.
      operationId: rescheduleAppointmentByBookingReference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                BookingReference:
                  type: string
                  description: The booking reference of the appointment
                LastName:
                  type: string
                  description: The last name of the person who booked the appointment
                DateOfBirth:
                  type: string
                  format: date
                  description: The date of birth of the person who booked the appointment
                ScheduleId:
                  type: string
                  description: The new schedule ID for rescheduling the appointment
              required:
                - BookingReference
                - LastName
                - DateOfBirth
                - ScheduleId
      responses:
        '200':
          description: Appointment rescheduled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Appointment linked to a user, login required to reschedule
        '404':
          description: Appointment not found
        '500':
          description: Internal server error
  /user/appointments/link:
    post:
      summary: Link an appointment to the current user
      operationId: linkAppointmentToUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                BookingReference:
                  type: string
                LastName:
                  type: string
                DateOfBirth:
                  type: string
                  format: date
      responses:
        '200':
          description: Appointment linked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: The appointment is already linked to a user
        '500':
          description: Internal server error
  /appointments/cancel:
    post:
      summary: Cancel an appointment
      operationId: cancelAppointmentByBookingReference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                BookingReference:
                  type: string
                  description: The booking reference of the appointment
                LastName:
                  type: string
                  description: The last name of the person who booked the appointment
                DateOfBirth:
                  type: string
                  format: date
                  description: The date of birth of the person who booked the appointment
              required:
                - BookingReference
                - LastName
                - DateOfBirth
      responses:
        '200':
          description: Appointment cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Appointment linked to a user, login required to cancel
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /appointments/{appointmentId}/cancel:
    post:
      summary: Cancel an appointment
      operationId: cancelAppointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the appointment to cancel
      responses:
        '200':
          description: Appointment cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
        '500':
          description: Internal server error

  /appointments/{appointmentId}/complete:
    post:
      summary: Complete an appointment
      operationId: completeAppointment
      security:
        - bearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the appointment to complete
      responses:
        '200':
          description: Appointment completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
        '500':
          description: Internal server error
  #
  # signup and login api
  #
  /signup:
    post:
      summary: User Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Signup successful
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /login:
    post:
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  #
  # doctor info api
  #

  /doctors:
    get:
      summary: List all doctors
      operationId: listDoctors
      parameters:
        - name: firstname
          in: query
          description: First name of the doctor
          schema:
            type: string
        - name: lastname
          in: query
          description: Last name of the doctor
          schema:
            type: string 
        - name: workplace
          in: query
          description: Name of the workplace to filter doctors by
          schema:
            type: string
      responses:
        '200':
          description: A list of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      summary: Create a new doctor
      operationId: createDoctor
      requestBody:
        description: Doctor object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Doctor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '400':
          description: Invalid input

  /doctors/{doctorId}:
    get:
      summary: Get details of a doctor
      operationId: getDoctorById
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to fetch
          schema:
            type: string
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
    put:
      summary: Update an existing doctor
      operationId: updateDoctor
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to update
          schema:
            type: string
      requestBody:
        description: Updated doctor object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: Doctor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '400':
          description: Invalid input
        '404':
          description: Doctor not found
    delete:
      summary: Delete a doctor
      operationId: deleteDoctor
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to delete
          schema:
            type: string
      responses:
        '204':
          description: Doctor deleted successfully
        '404':
          description: Doctor not found

  #
  # Clinic
  #
  /clinics:
    get:
      summary: List all clinics
      operationId: listClinics
      responses:
        '200':
          description: A list of clinics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workplace:
                      type: string
                      description: Name of the clinic
                    address:
                      type: string
                      description: Address of the clinic
  #
  # Patient api
  #
  /user/patients:
    get:
      summary: List all patients
      operationId: listPatients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
  
    post:
      summary: Create a new patient
      operationId: createPatient
      security:
        - bearerAuth: []
      requestBody:
        description: Patient object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  
  /user/patients/{patientId}:
    get:
      summary: Get details of a patient
      operationId: getPatientById
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to fetch
          schema:
            type: string
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
        '401':
          description: Unauthorized
  
    put:
      summary: Update an existing patient
      operationId: updatePatient
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to update
          schema:
            type: string
      requestBody:
        description: Updated patient object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid input
        '404':
          description: Patient not found
        '401':
          description: Unauthorized
  
    delete:
      summary: Delete a patient
      operationId: deletePatient
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to delete
          schema:
            type: string
      responses:
        '204':
          description: Patient deleted successfully
        '404':
          description: Patient not found
        '401':
          description: Unauthorized
  #
  # chatbot
  #
  /chatbot:
    post:
      summary: Generate a chatbot response based on the provided prompt.
      operationId: generateChatbotResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  description: The prompt to generate a response for.
              required:
                - prompt
      parameters:
        - in: header
          name: x-chatbot-session
          schema:
            type: string
          description: session id with the chatbot.
        - in: header
          name: x-access-token
          schema:
            type: string
          description: auth token after login.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: The session ID for the chatbot interaction.
                  response:
                    type: string
                    description: The chatbot's generated response.
                required:
                  - sessionId
                  - response
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  #
  # admin maintain user api
  #
  /admin/users:
    post:
      summary: Create a new user.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user.
                password:
                  type: string
                  description: The password for the new user.
                roles:
                  type: array
                  items:
                    type: string
                  description: An array of roles assigned to the user.
              required:
                - username
                - password
                - roles
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The username of the created user.
                  roles:
                    type: array
                    items:
                      type: string
                    description: An array of roles assigned to the user.
        '400':
          description: Bad Request
        '409':
          description: Conflict (e.g., username already exists)
        '500':
          description: Internal Server Error

  /admin/users/{username}:
    delete:
      summary: Delete a user by username.
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to be deleted.
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  #
  # Working Schedule
  #
  /schedules:
    get:
      summary: Get a list of working schedules
      description: Retrieve a list of working schedules filtered by doctor ID and date range.
      parameters:
        - in: query
          name: doctorId
          schema:
            type: string
          description: ID of the doctor to filter schedules.
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date to filter schedules.
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date to filter schedules.
      responses:
        '200':
          description: A list of working schedules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '500':
          description: Server error.

    post:
      summary: Create a new working schedule
      description: Create a new working schedule entry. Requires admin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '201':
          description: Working schedule created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '500':
          description: Server error.

  /schedules/{scheduleId}:
    put:
      summary: Update an existing working schedule
      description: Update the details of an existing working schedule by its ID. Requires admin role.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: scheduleId
          schema:
            type: string
          required: true
          description: ID of the working schedule to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleInput'
      responses:
        '200':
          description: Working schedule updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '500':
          description: Server error.

    delete:
      summary: Delete an existing working schedule
      description: Delete a working schedule by its ID. Requires admin role.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: scheduleId
          schema:
            type: string
          required: true
          description: ID of the working schedule to delete.
      responses:
        '204':
          description: Working schedule deleted successfully.
        '500':
          description: Server error.

components:
  schemas:
    Appointment:
      type: object
      required:
        - ScheduleId
        - FirstName
        - LastName
        - DateOfBirth
      properties:
        Id:
          type: string
          description: Unique identifier for the appointment
        FirstName:
          type: string
          description: First name of the patient
        LastName:
          type: string
          description: Last name of the patient
        DateOfBirth:
          type: string
          format: date
          description: date of birth of the patient
        BookingReference:
          type: string
          description: booking reference
        ScheduleId:
          type: string
          description: Unique identifier for the booking timeslot
        DoctorId:
          type: string
          description: Unique identifier for the doctor
        DoctorName:
          type: string
          description: Name of the General Practitioner
        Date:
          type: string
          format: date
          description: Date of the appointment
        StartTime:
          type: string
          format: time
          description: Start time of the appointment
        EndTime:
          type: string
          format: time
          description: End time of the appointment
        Reason:
          type: string
          description: Reason for the appointment
        Status:
          type: string
          enum:
            - active
            - cancelled
            - completed
          description: Status of the appointment
        Email:
          type: string
          description: Email address of the patient
        PhoneNumber:
          type: string
          description: Phone number of the patient
    User:
      type: object
      properties:
        Id:
          type: string
        Password:
          type: string
        Roles:
          type: array
          items:
            type: string

    Doctor:
      type: object
      required:
        - FirstName
        - LastName
        - Specialty
        - Phone
        - Email
        - Workplace
        - Address
      properties:
        Id:
          type: string
          description: Unique identifier for the doctor.
        FirstName:
          type: string
          description: First name of the doctor
        LastName:
          type: string
          description: Last name of the doctor
        Specialty:
          type: string
          description: Medical specialty of the doctor
        Phone:
          type: string
          description: Contact phone number of the doctor
        Email:
          type: string
          description: Email address of the doctor
        Workplace:
          type: string
          description: Workplace
        Address:
          type: string
          description: Address of the workplace
    Patient:
      type: object
      required:
        - Name
        - Gender
      properties:
        Id:
          type: string
          description: Unique identifier for the patient
        Name:
          type: string
          description: Name of the patient
        Gender:
          type: string
          description: Gender of the patient
        Age:
          type: integer
          description: Age of the patient
        Phone:
          type: string
          description: Contact phone number of the patient
        Email:
          type: string
          description: Email address of the patient
        Address:
          type: string
          description: Address of the patient
        UserId:
          type: string
          description: Unique identifier of a registered user
    Schedule:
      type: object
      properties:
        Id:
          type: string
        DoctorId:
          type: string
        DoctorName:
          type: string
        Date:
          type: string
          format: date
        StartTime:
          type: string
          format: time
        EndTime:
          type: string
          format: time
        Status:
          type: string
          enum:
            - available
            - occupied
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
