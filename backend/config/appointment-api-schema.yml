openapi: 3.0.0
info:
  title: GP Appointment Management API
  version: 1.0.0
  description: API to manage appointments with General Practitioners (GPs)

paths:
  /appointments:
    get:
      summary: List all appointments
      operationId: listAppointments
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    post:
      summary: Create a new appointment
      operationId: createAppointment
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input

  /appointments/{appointmentId}:
    get:
      summary: Get details of an appointment
      operationId: getAppointmentById
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to fetch
          schema:
            type: string
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
    put:
      summary: Update an existing appointment
      operationId: updateAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to update
          schema:
            type: string
      requestBody:
        description: Updated appointment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input
        '404':
          description: Appointment not found
    delete:
      summary: Delete an appointment
      operationId: deleteAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to delete
          schema:
            type: string
      responses:
        '204':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  #
  # signup and login api
  #
  /signup:
    post:
      summary: User Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Signup successful
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /login:
    post:
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  #
  # doctor info api
  #

  /doctors:
    get:
      summary: List all doctors
      operationId: listDoctors
      parameters:
        - name: workplace
          in: query
          required: false
          description: Name of the workplace to filter doctors by
          schema:
            type: string
      responses:
        '200':
          description: A list of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      summary: Create a new doctor
      operationId: createDoctor
      requestBody:
        description: Doctor object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Doctor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '400':
          description: Invalid input

  /doctors/{doctorId}:
    get:
      summary: Get details of a doctor
      operationId: getDoctorById
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to fetch
          schema:
            type: string
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
    put:
      summary: Update an existing doctor
      operationId: updateDoctor
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to update
          schema:
            type: string
      requestBody:
        description: Updated doctor object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: Doctor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '400':
          description: Invalid input
        '404':
          description: Doctor not found
    delete:
      summary: Delete a doctor
      operationId: deleteDoctor
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to delete
          schema:
            type: string
      responses:
        '204':
          description: Doctor deleted successfully
        '404':
          description: Doctor not found

  #
  # Clinic
  #
  /clinics:
    get:
      summary: List all clinics
      operationId: listClinics
      responses:
        '200':
          description: A list of clinics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workplace:
                      type: string
                      description: Name of the clinic
                    address:
                      type: string
                      description: Address of the clinic
  #
  # Patient api
  #
  /user/patients:
    get:
      summary: List all patients
      operationId: listPatients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
  
    post:
      summary: Create a new patient
      operationId: createPatient
      security:
        - bearerAuth: []
      requestBody:
        description: Patient object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  
  /user/patients/{patientId}:
    get:
      summary: Get details of a patient
      operationId: getPatientById
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to fetch
          schema:
            type: string
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
        '401':
          description: Unauthorized
  
    put:
      summary: Update an existing patient
      operationId: updatePatient
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to update
          schema:
            type: string
      requestBody:
        description: Updated patient object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid input
        '404':
          description: Patient not found
        '401':
          description: Unauthorized
  
    delete:
      summary: Delete a patient
      operationId: deletePatient
      security:
        - bearerAuth: []
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to delete
          schema:
            type: string
      responses:
        '204':
          description: Patient deleted successfully
        '404':
          description: Patient not found
        '401':
          description: Unauthorized


components:
  schemas:
    Appointment:
      type: object
      required:
        - patientName
        - gpName
        - date
        - time
      properties:
        id:
          type: string
          description: Unique identifier for the appointment
        patientName:
          type: string
          description: Name of the patient
        gpName:
          type: string
          description: Name of the General Practitioner
        date:
          type: string
          format: date
          description: Date of the appointment
        time:
          type: string
          format: time
          description: Time of the appointment
        reason:
          type: string
          description: Reason for the appointment
        status:
          type: string
          enum:
            - pending
            - scheduled
            - cancelled
            - completed
          description: Status of the appointment
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    Doctor:
      type: object
      required:
        - name
        - specialty
        - phone
      properties:
        id:
          type: string
          description: Unique identifier for the doctor
        name:
          type: string
          description: Name of the doctor
        specialty:
          type: string
          description: Medical specialty of the doctor
        phone:
          type: string
          description: Contact phone number of the doctor
        email:
          type: string
          description: Email address of the doctor
    Patient:
      type: object
      required:
        - name
        - gender
        - username
      properties:
        id:
          type: string
          description: Unique identifier for the patient
        name:
          type: string
          description: Name of the patient
        gender:
          type: string
          description: Gender of the patient
        age:
          type: integer
          description: Age of the patient
        phone:
          type: string
          description: Contact phone number of the patient
        email:
          type: string
          description: Email address of the patient
        address:
          type: string
          description: Address of the patient
        username:
          type: string
          description: Username of the patient
