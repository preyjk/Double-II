openapi: 3.0.0
info:
  title: GP Appointment Management API
  version: 1.0.0
  description: API to manage appointments with General Practitioners (GPs)

paths:
  /appointments:
    get:
      summary: List all appointments
      operationId: listAppointments
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAppointmentsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    post:
      summary: Create a new appointment
      operationId: createAppointment
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppointmentFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input

  /appointments/{appointmentId}:
    get:
      summary: Get details of an appointment
      operationId: getAppointmentById
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentByIdFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to fetch
          schema:
            type: string
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
    put:
      summary: Update an existing appointment
      operationId: updateAppointment
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAppointmentFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to update
          schema:
            type: string
      requestBody:
        description: Updated appointment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input
        '404':
          description: Appointment not found
    delete:
      summary: Delete an appointment
      operationId: deleteAppointment
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAppointmentFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to delete
          schema:
            type: string
      responses:
        '204':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  /appointments/{appointmentId}/cancel:
    put:
      summary: Cancel an appointment
      operationId: cancelAppointment
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancelAppointmentFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      parameters:
        - name: appointmentId
          in: path
          required: true
          description: ID of the appointment to cancel
          schema:
            type: string
      responses:
        '200':
          description: Appointment cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found

#
# signup and login api
#
  /signup:
    post:
      summary: User Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Signup successful
        '400':
          description: Invalid input
        '500':
          description: Internal server error
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:{region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{region}:{account_id}:function:SignupFunction/invocations
        httpMethod: POST
        type: aws_proxy
  /login:
    post:
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:{region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{region}:{account_id}:function:LoginFunction/invocations
        httpMethod: POST
        type: aws_proxy


components:
  schemas:
    Appointment:
      type: object
      required:
        - patientName
        - gpName
        - date
        - time
      properties:
        id:
          type: string
          description: Unique identifier for the appointment
        patientName:
          type: string
          description: Name of the patient
        gpName:
          type: string
          description: Name of the General Practitioner
        date:
          type: string
          format: date
          description: Date of the appointment
        time:
          type: string
          format: time
          description: Time of the appointment
        reason:
          type: string
          description: Reason for the appointment
        status:
          type: string
          enum:
            - pending
            - scheduled
            - cancelled
            - completed
          description: Status of the appointment
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
