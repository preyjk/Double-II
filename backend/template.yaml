AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  GP Appointment Management API - AWS SAM Template

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: nodejs18.x
    CodeUri: ./app
    Environment:
      Variables:
        TABLE_NAME: !Ref AppointmentsTable
        ENV: !Ref EnvName
        DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

Resources:
  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: Appointments
      BillingMode: 'PAY_PER_REQUEST'
      OnDemandThroughput:
        MaxReadRequestUnits: 1
        MaxWriteRequestUnits: 1

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      BillingMode: 'PAY_PER_REQUEST'
      OnDemandThroughput:
        MaxReadRequestUnits: 1
        MaxWriteRequestUnits: 1

  NodeDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nodejs-dependencies
      Description: Node.js dependencies layer
      ContentUri: ./app
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: makefile

  ListAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AppointmentController.listAppointments
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Events:
        ListAppointments:
          Type: Api
          Properties:
            Path: /appointments
            Method: get
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  CreateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AppointmentController.createAppointment
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        CreateAppointment:
          Type: Api
          Properties:
            Path: /appointments
            Method: post
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  GetAppointmentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AppointmentController.getAppointmentById
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Events:
        GetAppointmentById:
          Type: Api
          Properties:
            Path: /appointments/{appointmentId}
            Method: get
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  UpdateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AppointmentController.updateAppointment
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        UpdateAppointment:
          Type: Api
          Properties:
            Path: /appointments/{appointmentId}
            Method: put
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  DeleteAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AppointmentController.deleteAppointment
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        DeleteAppointment:
          Type: Api
          Properties:
            Path: /appointments/{appointmentId}
            Method: delete
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile
  
  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AuthController.signupHandler
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        SignupApi:
          Type: Api
          Properties:
            Path: /signup
            Method: post
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/controller/aws-lambda/AuthController.loginHandler
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref BackendApi
      Layers:
        - !Ref NodeDepLayer
    Metadata:
      BuildMethod: makefile

  BackendApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: ./config/appointment-api-schema.yml
      StageName: v1

Parameters:
  EnvName:
    Type: String
    Default: 'local'
  DynamoDBEndpoint:
    Type: String
    Default: 'http://dynamodb-local:8000'

