AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CloudFrontOriginAccessControl:
    Type: 'AWS::CloudFront::OriginAccessControl'
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: 's3'
        SigningBehavior: 'always'
        SigningProtocol: 'sigv4'

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: 'BucketOwnerPreferred'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
  
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontCachePolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        Name: !Sub '${AWS::StackName}-CachePolicy'
        Comment: 'Policy with caching enabled. Supports Gzip and Brotli compression.'
        DefaultTTL: 86400
        MinTTL: 1
        MaxTTL: 31536000
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: 'none'
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: 'none'
          HeadersConfig:
            HeaderBehavior: 'none'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: !Sub '${AWS::StackName}-S3Origin'
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
        DefaultRootObject: 'index.html'
        DefaultCacheBehavior:
          TargetOriginId: !Sub '${AWS::StackName}-S3Origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods:
            - 'GET'
            - 'HEAD'
          CachedMethods:
            - 'GET'
            - 'HEAD'
          Compress: true
          CachePolicyId: !Ref CloudFrontCachePolicy
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: 'PriceClass_All'
        HttpVersion: 'http2'
        IPV6Enabled: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 10
        Restrictions:
          GeoRestriction:
            RestrictionType: 'none'

Outputs:
  S3BucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref S3Bucket
  CloudFrontDistributionId:
    Description: 'ID of the CloudFront distribution'
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: 'Domain name of the CloudFront distribution'
    Value: !GetAtt CloudFrontDistribution.DomainName
