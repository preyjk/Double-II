openapi: 3.0.0
info:
  title: GP Appointment Management API
  version: 1.0.0
  description: API to manage appointments with General Practitioners (GPs)

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.gpbooking.icu
    description: AWS server

paths:
  /appointments:
    post:
      summary: Create a new appointment
      operationId: createAppointment
      description: to create a new appointment. the user should confirm the information before calling this api
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input
  /user/appointments:
    get:
      summary: List all appointments of current user.
      description: List all appointments of current user.
      operationId: listAppointments
      parameters:
        - in: query
          name: x_access_token
          schema:
            type: string
          required: true
          description: x_access_token
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
  #
  # doctor info api
  #
  /doctors:
    get:
      summary: List all doctors
      operationId: listDoctors
      description: list doctors. It can be filtered by workplace.
      parameters:
        - name: firstname
          in: query
          description: First name of the doctor
          schema:
            type: string
        - name: lastname
          in: query
          description: Last name of the doctor
          schema:
            type: string 
        - name: workplace
          in: query
          description: Name of the workplace to filter doctors by
          schema:
            type: string
      responses:
        '200':
          description: A list of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
  /schedules:
    get:
      summary: Get a list of working schedules
      operationId: listSchedules
      description: Retrieve a list of appointment timeslot filtered by doctor ID and date range. you cannot book the schedule whose Status is occupied
      parameters:
        - in: query
          name: doctorId
          schema:
            type: string
          required: true
          description: ID of the doctor to filter schedules.
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date to filter schedules.
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date to filter schedules.
      responses:
        '200':
          description: A list of working schedules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '500':
          description: Server error.
  #
  # Clinic
  #
  /clinics:
    get:
      summary: List all clinics
      operationId: listClinics
      description: list clinics, including name and address
      responses:
        '200':
          description: A list of clinics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workplace:
                      type: string
                      description: Name of the clinic
                    address:
                      type: string
                      description: Address of the clinic

components:
  schemas:
    Appointment:
      type: object
      required:
        - s_ScheduleId
        - PatientName
      properties:
        Id:
          type: string
          description: Unique identifier for the appointment
        s_ScheduleId:
          type: string
          description: Unique identifier for the booking timeslot
        PatientName:
          type: string
          description: Name of the patient
        Reason:
          type: string
          description: Reason for the appointment

    Doctor:
      type: object
      properties:
        Id:
          type: string
          description: Unique identifier for the doctor. doctorId. s_DoctorId.
        FirstName:
          type: string
          description: First name of the doctor
        LastName:
          type: string
          description: Last name of the doctor
        Specialty:
          type: string
          description: Medical specialty of the doctor
        Phone:
          type: string
          description: Contact phone number of the doctor
        Email:
          type: string
          description: Email address of the doctor
        Workplace:
          type: string
          description: Workplace
        Address:
          type: string
          description: Address of the workplace
    Schedule:
      type: object
      properties:
        Id:
          type: string
          description: it is s_ScheduleId
        DoctorId:
          type: string
          description: id of the doctor
        DoctorName:
          type: string
          description: name of the doctor
        Date:
          type: string
          format: date
          description: timeslot date
        StartTime:
          type: string
          format: time
          description: timeslot start time
        EndTime:
          type: string
          format: time
          description: timeslot end time
        Status:
          type: string
          description: status of this timeslot. you cannot book occupied timeslot
          enum:
            - available
            - occupied